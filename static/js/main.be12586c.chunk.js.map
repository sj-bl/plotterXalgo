{"version":3,"sources":["redux/plotterConfig/plotter.type.js","redux/plotterConfig/plotter.reducer.js","redux/pixelData/pixelData.type.js","redux/pixelData/pixelData.reducer.js","redux/rootReducer.js","redux/store.js","redux/pixelData/pixelData.action.js","components/plotterConfig/plotterConfig.component.jsx","redux/plotterConfig/plotter.action.js","components/guidelines/guideline.component.jsx","components/pixel/pixel.component.jsx","components/canvas/canvas.component.jsx","logic/algorithm/dda.line.js","logic/algorithm/bresenham.circle.js","logic/algorithm/bresenham.line.js","logic/algorithm/dda.circle.js","logic/algorithm/mid.circle.js","logic/algorithm/mid.line.js","components/userInput/userInput.component.jsx","logic/logic.controller.js","pages/plotter.page.jsx","App.js","index.js"],"names":["PlotterActionType","UPDATE_GRID","require","INITIAL_STATE","plotterConfig","gridSize","duration","color","PixelActionType","pixels","rootReducer","combineReducers","plotter","state","action","type","payload","pixelData","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","updatePixel","data","clearGrid","connect","dispatch","updateGrid","config","props","React","setGridSize","setDuration","setColor","isValidColor","test","flexGridColumnCount","flexGridColumnGap","flexGridRowGap","label","id","value","searchable","placeholder","onChange","console","log","options","labelKey","valueKey","size","SIZE","compact","required","margin","kind","onClick","max","min","error","e","target","GuideLines","properties","pixelSize","zIndex","className","style","height","width","position","pointerEvents","xmlns","patternUnits","d","fill","stroke","strokeWidth","Pixel","x","y","opacity","animation","bgcolor","content","padding","backgroundColor","border","$style","triggerType","TRIGGER_TYPE","hover","returnFocus","autoFocus","showArrow","gridColumnStart","gridRowStart","Canvas","this","display","gridTemplateColumns","gridTemplateRows","map","pixel","index","isVisiblePixel","time","length","key","Component","ddaLine","X0","Y0","X1","Y1","coOrdinates","dx","dy","steps","Math","abs","Xinc","Yinc","X","Y","i","push","round","bresenhamCirle","Xc","Yc","R","Coordinates","bresenhamLine","X2","Y2","CoOrdinates","pk","ddaCircle","xc","yc","r","xc1","xc2","yc1","yc2","eps","sx","sy","val","pow","midCircle","x_centre","y_centre","P","midLine","CoOrdinate","di","useState","algorithmFor","setAlgorithmFor","algorithm","setAlgorithm","Number","x1","setx1","y1","sety1","x2","setx2","y2","sety2","radius","setRadius","marginTop","align","name","labelPlacement","fontSize","fontWeight","justifyContent","parseInt","preventDefault","algoFor","algo","pointData","logicController","Plotter","App","engine","Styletron","ReactDOM","render","theme","LightTheme","document","getElementById"],"mappings":"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","file":"static/js/main.be12586c.chunk.js","sourcesContent":["export const PlotterActionType = {\r\n  UPDATE_GRID: \"UPDATE_GRID\",\r\n};\r\n","const { PlotterActionType } = require(\"./plotter.type\");\r\n\r\nconst INITIAL_STATE = {\r\n  plotterConfig: {\r\n    gridSize: 64,\r\n    duration: 1000,\r\n    color: \"#000000\",\r\n  },\r\n};\r\n\r\nexport const plotterConfigReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case PlotterActionType.UPDATE_GRID:\r\n      return { ...state, plotterConfig: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const PixelActionType = {\r\n  UPDATE_PIXEL: \"UPDATE_PIXEL\",\r\n  CLEAR_GRID: \"CLEAR_GRID\",\r\n};\r\n","import { PixelActionType } from \"./pixelData.type\";\r\n\r\nconst INITIAL_STATE = {\r\n  pixels: [],\r\n};\r\n\r\nexport const pixelReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case PixelActionType.UPDATE_PIXEL:\r\n      return { pixels: action.payload };\r\n    case PixelActionType.CLEAR_GRID:\r\n      return { pixels: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { plotterConfigReducer } from \"./plotterConfig/plotter.reducer\";\r\nimport { pixelReducer } from \"./pixelData/pixelData.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  plotter: plotterConfigReducer,\r\n  pixelData: pixelReducer,\r\n});\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport { logger } from \"redux-logger\";\r\nimport rootReducer from \"./rootReducer\";\r\nconst middlewares = [];\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\nexport const store = createStore(\r\n  rootReducer /* preloadedState, */,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import { PixelActionType } from \"./pixelData.type\";\r\nexport const updatePixel = (data) => ({\r\n  type: PixelActionType.UPDATE_PIXEL,\r\n  payload: data,\r\n});\r\nexport const clearGrid = () => ({\r\n  type: PixelActionType.CLEAR_GRID,\r\n});\r\n","import * as React from \"react\";\r\nimport { FormControl } from \"baseui/form-control\";\r\nimport { Select, SIZE } from \"baseui/select\";\r\nimport { FlexGrid, FlexGridItem } from \"baseui/flex-grid\";\r\nimport { Block } from \"baseui/block\";\r\nimport { Button } from \"baseui/button\";\r\nimport { Input } from \"baseui/input\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateGrid } from \"../../redux/plotterConfig/plotter.action\";\r\nimport { updatePixel, clearGrid } from \"../../redux/pixelData/pixelData.action\";\r\n\r\nconst PlotterConfig = (props) => {\r\n  const { updateGrid, plotterConfig, updatePixel, clearGrid } = props;\r\n  // console.log(plotterConfig);\r\n  const [gridSize, setGridSize] = React.useState();\r\n  const [duration, setDuration] = React.useState();\r\n  const [color, setColor] = React.useState(plotterConfig.color);\r\n  const isValidColor = /^#[0-9a-f]{3}([0-9a-f]{3})?$/i.test(color);\r\n  return (\r\n    <FlexGrid\r\n      flexGridColumnCount={4}\r\n      flexGridColumnGap=\"scale800\"\r\n      flexGridRowGap=\"scale800\"\r\n    >\r\n      <FlexGridItem>\r\n        <FormControl label=\"Grid Size\">\r\n          <Select\r\n            id=\"gridSize\"\r\n            value={gridSize}\r\n            searchable={false}\r\n            placeholder={`${plotterConfig.gridSize} x ${plotterConfig.gridSize}`}\r\n            onChange={({ value }) => {\r\n              setGridSize(value);\r\n              console.log(value[0].value);\r\n              updateGrid({\r\n                gridSize: value[0].value,\r\n                duration: plotterConfig.duration,\r\n                color: plotterConfig.color,\r\n              });\r\n            }}\r\n            options={[\r\n              { id: \"8\", gridSize: \"8 x 8\", value: 8 },\r\n              { id: \"16\", gridSize: \"16 x 16\", value: 16 },\r\n              { id: \"32\", gridSize: \"32 x 32\", value: 32 },\r\n              { id: \"64\", gridSize: \"64 x 64\", value: 64 },\r\n              { id: \"128\", gridSize: \"128 x 128\", value: 128 },\r\n            ]}\r\n            labelKey=\"gridSize\"\r\n            valueKey=\"gridSize\"\r\n            size={SIZE.compact}\r\n            required\r\n          />\r\n        </FormControl>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <FormControl label=\"Duration\">\r\n          <Select\r\n            id=\"duration\"\r\n            searchable={false}\r\n            placeholder={`${plotterConfig.duration / 1000}s`}\r\n            value={duration}\r\n            onChange={({ value }) => {\r\n              setDuration(value);\r\n              updateGrid({\r\n                duration: value[0].value,\r\n                gridSize: plotterConfig.gridSize,\r\n                color: plotterConfig.color,\r\n              });\r\n            }}\r\n            options={[\r\n              { id: \"500\", duration: \"0.5s\", value: 500 },\r\n              { id: \"1000\", duration: \"1s\", value: 1000 },\r\n              { id: \"2000\", duration: \"2s\", value: 2000 },\r\n              { id: \"4000\", duration: \"4s\", value: 4000 },\r\n              { id: \"8000\", duration: \"8s\", value: 8000 },\r\n            ]}\r\n            labelKey=\"duration\"\r\n            valueKey=\"duration\"\r\n            size={SIZE.compact}\r\n          />\r\n        </FormControl>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Block margin=\"scale900\"></Block>\r\n        <Button size={SIZE.compact} kind=\"primary\" onClick={() => clearGrid()}>\r\n          Clear\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <FormControl label=\"Pixel Color\">\r\n          <Input\r\n            type=\"text\"\r\n            size={SIZE.compact}\r\n            max={7}\r\n            min={7}\r\n            value={color}\r\n            error={!isValidColor}\r\n            onChange={(e) => {\r\n              setColor(e.target.value);\r\n              updateGrid({\r\n                duration: plotterConfig.duration,\r\n                gridSize: plotterConfig.gridSize,\r\n                color: e.target.value,\r\n              });\r\n            }}\r\n          />\r\n        </FormControl>\r\n      </FlexGridItem>\r\n    </FlexGrid>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateGrid: (payload) => dispatch(updateGrid(payload)),\r\n  updatePixel: (payload) => dispatch(updatePixel(payload)),\r\n  clearGrid: () => dispatch(clearGrid()),\r\n});\r\nconst mapStateToProps = (state) => ({\r\n  plotterConfig: state.plotter.plotterConfig,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotterConfig);\r\n","import { PlotterActionType } from \"./plotter.type\";\r\n\r\nexport const updateGrid = (config) => ({\r\n  type: PlotterActionType.UPDATE_GRID,\r\n  payload: config,\r\n});\r\n","import React from \"react\";\r\n\r\nexport const GuideLines = ({ properties }) => {\r\n  const { pixelSize, gridSize } = properties;\r\n  const zIndex = properties.zIndex ? properties.zIndex : 0;\r\n  // console.log(properties);\r\n  return (\r\n    <div\r\n      className=\"guideline\"\r\n      style={{\r\n        height: pixelSize * gridSize + 0.7,\r\n        width: pixelSize * gridSize + 0.7,\r\n        position: \"absolute\",\r\n        zIndex,\r\n        pointerEvents: \"none\",\r\n      }}\r\n    >\r\n      <svg\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        pointerEvents=\"none\"\r\n      >\r\n        <defs>\r\n          <pattern\r\n            id=\"smallGrid\"\r\n            width={pixelSize}\r\n            height={pixelSize}\r\n            patternUnits=\"userSpaceOnUse\"\r\n          >\r\n            <path\r\n              d={`M ${pixelSize} 0 L 0 0 0 ${pixelSize}`}\r\n              fill=\"none\"\r\n              stroke=\"gray\"\r\n              strokeWidth=\"0.5\"\r\n            />\r\n          </pattern>\r\n          <pattern\r\n            id=\"grid\"\r\n            width={pixelSize * 8}\r\n            height={pixelSize * 8}\r\n            patternUnits=\"userSpaceOnUse\"\r\n          >\r\n            <rect\r\n              width={pixelSize * 8}\r\n              height={pixelSize * 8}\r\n              fill=\"url(#smallGrid)\"\r\n              pointerEvents=\"none\"\r\n            />\r\n            <path\r\n              d={`M ${pixelSize * 8} 0 L 0 0 0 ${pixelSize * 8}`}\r\n              fill=\"none\"\r\n              stroke=\"grey\"\r\n              strokeWidth=\"1\"\r\n            />\r\n          </pattern>\r\n        </defs>\r\n\r\n        <rect\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          fill=\"url(#grid)\"\r\n          pointerEvents=\"none\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { StatefulPopover, TRIGGER_TYPE } from \"baseui/popover\";\r\nimport { Block } from \"baseui/block\";\r\n\r\nconst Pixel = ({ properties }) => {\r\n  let { pixelSize, x, y, opacity, animation, color } = properties;\r\n  opacity = opacity ? opacity : 0;\r\n  let bgcolor = /^#[0-9a-f]{3}([0-9a-f]{3})?$/i.test(color) ? color : \"red\";\r\n  return (\r\n    <StatefulPopover\r\n      content={() => (\r\n        <Block\r\n          padding={\"5px 10px\"}\r\n          backgroundColor=\"#333333\"\r\n          color=\"white\"\r\n          border=\"1px white solid\"\r\n          $style={{ border: \"1px white solid\" }}\r\n        >{`(${x - 1},${y - 1})`}</Block>\r\n      )}\r\n      triggerType={TRIGGER_TYPE.hover}\r\n      returnFocus\r\n      autoFocus\r\n      showArrow={true}\r\n    >\r\n      <div\r\n        id={`${x}_${y}`}\r\n        style={{\r\n          gridColumnStart: `${x}`,\r\n          gridRowStart: `${y}`,\r\n          width: pixelSize,\r\n          height: pixelSize,\r\n          opacity: opacity,\r\n          backgroundColor: bgcolor,\r\n          animation,\r\n          zIndex: -2,\r\n        }}\r\n      />\r\n    </StatefulPopover>\r\n  );\r\n};\r\n\r\nexport default Pixel;\r\n","import React from \"react\";\r\nimport \"./canvas.style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { GuideLines } from \"../guidelines/guideline.component\";\r\nimport Pixel from \"../pixel/pixel.component\";\r\nclass Canvas extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    const { gridSize, duration, color } = this.props.plotterConfig;\r\n    const { pixelData } = this.props;\r\n\r\n    // console.log(gridSize, duration);\r\n    let pixelSize = 8;\r\n\r\n    switch (gridSize) {\r\n      case 128:\r\n        pixelSize = 4;\r\n        break;\r\n      case 64:\r\n        pixelSize = 8;\r\n        break;\r\n      case 32:\r\n        pixelSize = 16;\r\n        break;\r\n      case 16:\r\n        pixelSize = 32;\r\n        break;\r\n      case 8:\r\n        pixelSize = 64;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // console.log(pixelSize);\r\n    return (\r\n      <div className=\"plotter-container\" style={{ position: \"relative\" }}>\r\n        <GuideLines properties={{ gridSize, pixelSize, zIndex: -1 }} />\r\n        <div\r\n          className=\"pixel-map\"\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: `repeat(${gridSize},${pixelSize}px)`,\r\n            gridTemplateRows: `repeat(${gridSize},${pixelSize}px)`,\r\n            position: \"absolute\",\r\n            zIndex: -3,\r\n          }}\r\n        >\r\n          {pixelData.map((pixel, index) => {\r\n            const { x, y, bgcolor, opacity } = pixel;\r\n\r\n            const isVisiblePixel =\r\n              x < gridSize && y < gridSize && x > 0 && y > 0;\r\n\r\n            const time = duration / 1000 / pixelData.length;\r\n            let animation = `show  ${time}s ${time * index}s forwards`;\r\n            if (isVisiblePixel) {\r\n              return (\r\n                <Pixel\r\n                  properties={{\r\n                    pixelSize,\r\n                    x: x + 1,\r\n                    y: y + 1,\r\n\r\n                    opacity,\r\n                    animation,\r\n                    color,\r\n                  }}\r\n                  key={`${index}_${pixel.x}_${pixel.y}`}\r\n                />\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    plotterConfig: state.plotter.plotterConfig,\r\n    pixelData: state.pixelData.pixels,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Canvas);\r\n","const ddaLine = (X0, Y0, X1, Y1) => {\r\n  // console.log(\"line algo\", X0, Y0, X1, Y1);\r\n  const coOrdinates = [];\r\n\r\n  let dx = X1 - X0;\r\n  let dy = Y1 - Y0;\r\n  let steps = Math.abs(dx) > Math.abs(dy) ? Math.abs(dx) : Math.abs(dy);\r\n  let Xinc = dx / steps;\r\n  let Yinc = dy / steps;\r\n  let X = X0;\r\n  let Y = Y0;\r\n  for (let i = 0; i < steps; i++) {\r\n    coOrdinates.push({\r\n      x: Math.round(X),\r\n      y: Math.round(Y),\r\n    });\r\n\r\n    X += Xinc * 1;\r\n    Y += Yinc * 1;\r\n  }\r\n  return coOrdinates;\r\n};\r\n\r\nexport default ddaLine;\r\n","// const bresenhamCirle = (xc, yc, r) => {\r\n//   const CoOrdinates = [];\r\n//   let x = 0,\r\n//     y = r;\r\n//   let d = 3 - 2 * r;\r\n//   CoOrdinates.push({ x: xc + x, y: yc + y });\r\n//   CoOrdinates.push({ x: xc - x, y: yc + y });\r\n//   CoOrdinates.push({ x: xc + x, y: yc - y });\r\n//   CoOrdinates.push({ x: xc - x, y: yc - y });\r\n//   CoOrdinates.push({ x: xc + y, y: yc + x });\r\n//   CoOrdinates.push({ x: xc - y, y: yc + x });\r\n//   CoOrdinates.push({ x: xc + y, y: yc - x });\r\n//   CoOrdinates.push({ x: xc - y, y: yc - x });\r\n\r\n//   while (y >= x) {\r\n//     x++;\r\n\r\n//     if (d > 0) {\r\n//       y--;\r\n//       d = d + 4 * (x - y) + 10;\r\n//     } else {\r\n//       d = d + 4 * x + 6;\r\n//     }\r\n//     CoOrdinates.push({ x: xc + x, y: yc + y });\r\n//     CoOrdinates.push({ x: xc - x, y: yc + y });\r\n//     CoOrdinates.push({ x: xc + x, y: yc - y });\r\n//     CoOrdinates.push({ x: xc - x, y: yc - y });\r\n//     CoOrdinates.push({ x: xc + y, y: yc + x });\r\n//     CoOrdinates.push({ x: xc - y, y: yc + x });\r\n//     CoOrdinates.push({ x: xc + y, y: yc - x });\r\n//     CoOrdinates.push({ x: xc - y, y: yc - x });\r\n//   }\r\n//   return CoOrdinates;\r\n// };\r\n// export default bresenhamCirle;\r\n// ############################################################\r\n// v2\r\nconst bresenhamCirle = (Xc, Yc, R) => {\r\n  const Coordinates = [];\r\n  let X, Y;\r\n  X = 0;\r\n  Y = R;\r\n  let d = 3 - 2 * R;\r\n  Coordinates.push({ x: R + Xc, y: Yc });\r\n  Coordinates.push({ x: Xc - R, y: Yc });\r\n  Coordinates.push({ x: Xc, y: Yc + R });\r\n  Coordinates.push({ x: Xc, y: Yc - R });\r\n  while (Y >= X) {\r\n    if (d < 0) {\r\n      d = d + 4 * X + 6;\r\n      X = X + 1;\r\n      Coordinates.push({ x: Y + Xc, y: X + Yc });\r\n      Coordinates.push({ x: X + Xc, y: Y + Yc });\r\n      Coordinates.push({ x: -X + Xc, y: Y + Yc });\r\n      Coordinates.push({ x: -Y + Xc, y: X + Yc });\r\n      Coordinates.push({ x: -Y + Xc, y: -X + Yc });\r\n      Coordinates.push({ x: -X + Xc, y: -Y + Yc });\r\n      Coordinates.push({ x: X + Xc, y: -Y + Yc });\r\n      Coordinates.push({ x: Y + Xc, y: -X + Yc });\r\n    } else {\r\n      d = d + 4 * (X - Y) + 10;\r\n      X = X + 1;\r\n      Y = Y - 1;\r\n      Coordinates.push({ x: Y + Xc, y: X + Yc });\r\n      Coordinates.push({ x: X + Xc, y: Y + Yc });\r\n      Coordinates.push({ x: -X + Xc, y: Y + Yc });\r\n      Coordinates.push({ x: -Y + Xc, y: X + Yc });\r\n      Coordinates.push({ x: -Y + Xc, y: -X + Yc });\r\n      Coordinates.push({ x: -X + Xc, y: -Y + Yc });\r\n      Coordinates.push({ x: X + Xc, y: -Y + Yc });\r\n      Coordinates.push({ x: Y + Xc, y: -X + Yc });\r\n    }\r\n  }\r\n  return Coordinates;\r\n};\r\n\r\nexport default bresenhamCirle;\r\n","const bresenhamLine = (X1, Y1, X2, Y2) => {\r\n  const CoOrdinates = [];\r\n  let dx = X2 - X1;\r\n  let dy = Y2 - Y1;\r\n\r\n  let x = X1;\r\n  let y = Y1;\r\n\r\n  //this is the case when slope(m) < 1\r\n  if (Math.abs(dx) > Math.abs(dy)) {\r\n    CoOrdinates.push({ x, y });\r\n\r\n    let pk = 2 * Math.abs(dy) - Math.abs(dx);\r\n\r\n    for (let i = 0; i < Math.abs(dx); i++) {\r\n      CoOrdinates.push({ x, y });\r\n      x = x + 1;\r\n      if (pk < 0) pk = pk + 2 * Math.abs(dy);\r\n      else {\r\n        y = y + 1;\r\n        pk = pk + 2 * Math.abs(dy) - 2 * Math.abs(dx);\r\n      }\r\n    }\r\n  } else {\r\n    //this is the case when slope is greater than or equal to 1  i.e: m>=1\r\n    CoOrdinates.push({ x, y });\r\n    let pk = 2 * Math.abs(dx) - Math.abs(dy);\r\n\r\n    for (let i = 0; i < Math.abs(dy); i++) {\r\n      y = y + 1;\r\n      if (pk < 0) pk = pk + 2 * Math.abs(dx);\r\n      else {\r\n        x = x + 1;\r\n        pk = pk + 2 * Math.abs(dx) - 2 * Math.abs(dy);\r\n      }\r\n\r\n      CoOrdinates.push({ x, y });\r\n    }\r\n  }\r\n  return CoOrdinates;\r\n};\r\n\r\n// const bresenhamLine = (X1, Y1, X2, Y2) => {\r\n//   const CoOrdinates = [];\r\n//   let dx = Math.abs(X2 - X1);\r\n//   let dy = Math.abs(Y2 - Y1);\r\n\r\n//   let x = X1;\r\n//   let y = Y1;\r\n//   let pk = 2 * dy - dx;\r\n\r\n//   if()\r\n// //   return CoOrdinates;\r\n// };\r\nexport default bresenhamLine;\r\n","const ddaCircle = (xc, yc, r) => {\r\n  const CoOrdinates = [];\r\n  let xc1, xc2, yc1, yc2, eps, sx, sy;\r\n\r\n  let val, i;\r\n  CoOrdinates.push({ x: xc + r, y: yc });\r\n  xc1 = r;\r\n\r\n  yc1 = 0;\r\n\r\n  sx = xc1;\r\n\r\n  sy = yc1;\r\n\r\n  i = 0;\r\n\r\n  do {\r\n    val = Math.pow(2, i);\r\n\r\n    i++;\r\n  } while (val < r);\r\n\r\n  eps = 1 / Math.pow(2, i - 1);\r\n\r\n  do {\r\n    xc2 = xc1 + yc1 * eps;\r\n    yc2 = yc1 - eps * xc2;\r\n\r\n    CoOrdinates.push({ x: Math.round(xc + xc2), y: Math.round(yc - yc2) });\r\n\r\n    xc1 = xc2;\r\n\r\n    yc1 = yc2;\r\n  } while (yc1 - sy < eps || sx - xc1 > eps);\r\n\r\n  return CoOrdinates;\r\n};\r\nexport default ddaCircle;\r\n","// Implementing Mid-Point Circle Drawing Algorithm\r\nconst midCircle = (x_centre, y_centre, r) => {\r\n  let x = r,\r\n    y = 0;\r\n  const CoOrdinates = [];\r\n\r\n  // Printing the initial point on the axes\r\n  // after translation\r\n  CoOrdinates.push({ x: x + x_centre, y: y + y_centre });\r\n  CoOrdinates.push({ x: x_centre, y: y_centre - r });\r\n  CoOrdinates.push({ x: x_centre - r, y: y_centre });\r\n\r\n  // When radius is zero only a single\r\n  // point will be printed\r\n  if (r > 0) {\r\n    CoOrdinates.push({ x: x + x_centre, y: -y + y_centre });\r\n    CoOrdinates.push({ x: y + x_centre, y: x + y_centre });\r\n    CoOrdinates.push({ x: -y + x_centre, y: x + y_centre });\r\n  }\r\n\r\n  // Initialising the value of P\r\n  let P = 1 - r;\r\n  while (x > y) {\r\n    y++;\r\n\r\n    // Mid-point is inside or on the perimeter\r\n    if (P <= 0) P = P + 2 * y + 1;\r\n    // Mid-point is outside the perimeter\r\n    else {\r\n      x--;\r\n      P = P + 2 * y - 2 * x + 1;\r\n    }\r\n\r\n    // All the perimeter points have already been printed\r\n    if (x < y) break;\r\n\r\n    // Printing the generated point and its reflection\r\n    // in the other octants after translation\r\n    CoOrdinates.push({ x: x + x_centre, y: y + y_centre });\r\n    CoOrdinates.push({ x: -x + x_centre, y: y + y_centre });\r\n    CoOrdinates.push({ x: x + x_centre, y: -y + y_centre });\r\n    CoOrdinates.push({ x: -x + x_centre, y: -y + y_centre });\r\n\r\n    // If the generated point is on the line x = y then\r\n    // the perimeter points have already been printed\r\n    if (x !== y) {\r\n      CoOrdinates.push({ x: y + x_centre, y: x + y_centre });\r\n      CoOrdinates.push({ x: -y + x_centre, y: x + y_centre });\r\n      CoOrdinates.push({ x: y + x_centre, y: -x + y_centre });\r\n      CoOrdinates.push({ x: -y + x_centre, y: -x + y_centre });\r\n    }\r\n  }\r\n  return CoOrdinates;\r\n};\r\nexport default midCircle;\r\n","const midLine = (X1, Y1, X2, Y2) => {\r\n  const CoOrdinate = [];\r\n  // calculate dx & dy\r\n  CoOrdinate.push({ x: X1, y: Y1 });\r\n  CoOrdinate.push({ x: X2, y: Y2 });\r\n  let dx = X2 - X1;\r\n  let dy = Y2 - Y1;\r\n\r\n  // initial value of decision parameter d\r\n  let d = (dy - dx) * 2;\r\n  let di = 2 * dy - dx;\r\n  let x = X1;\r\n  let y = Y1;\r\n  while (x < X2) {\r\n    if (di < 0) {\r\n      x = x + 1;\r\n      di = di + 2 * y;\r\n      CoOrdinate.push({ x, y });\r\n    } else {\r\n      x = x + 1;\r\n      y = y + 1;\r\n      di = di + d;\r\n      CoOrdinate.push({ x, y });\r\n    }\r\n  }\r\n\r\n  return CoOrdinate;\r\n};\r\n\r\nexport default midLine;\r\n","import React, { useState } from \"react\";\r\nimport { Button, SIZE } from \"baseui/button\";\r\nimport { Input } from \"baseui/input\";\r\nimport { connect } from \"react-redux\";\r\nimport { updatePixel, clearGrid } from \"../../redux/pixelData/pixelData.action\";\r\n// import data from \"../../data\";\r\nimport { Block } from \"baseui/block\";\r\nimport { Radio, RadioGroup } from \"baseui/radio\";\r\nimport { logicController } from \"../../logic/logic.controller\";\r\nimport { FormControl } from \"baseui/form-control\";\r\n\r\nconst UserInput = ({ updatePixel, pixels }) => {\r\n  const [algorithmFor, setAlgorithmFor] = useState(\"line\");\r\n  const [algorithm, setAlgorithm] = useState(\"dda\");\r\n  const [x1, setx1] = useState(Number);\r\n  const [y1, sety1] = useState(Number);\r\n  const [x2, setx2] = useState(Number);\r\n  const [y2, sety2] = useState(Number);\r\n  const [radius, setRadius] = useState(Number);\r\n\r\n  let data = [...pixels];\r\n  return (\r\n    <div className=\"main-input-container\">\r\n      <form>\r\n        {/* <label htmlFor=\"algoFor\" style>Algo For</label> */}\r\n        <Block marginTop=\"5rem\">\r\n          <FormControl label=\"Algorithm For\">\r\n            <RadioGroup\r\n              align=\"horizontal\"\r\n              name=\"horizontal\"\r\n              onChange={(e) => setAlgorithmFor(e.target.value)}\r\n              value={algorithmFor}\r\n              id=\"algoFor\"\r\n              label=\"Algo for\"\r\n              labelPlacement=\"right\"\r\n            >\r\n              <Radio value=\"line\">Line</Radio>\r\n              <Radio value=\"circle\">Circle</Radio>\r\n            </RadioGroup>\r\n          </FormControl>\r\n          <FormControl label=\"Choose Algorithm\">\r\n            <RadioGroup\r\n              align=\"horizontal\"\r\n              name=\"horizontal\"\r\n              onChange={(e) => setAlgorithm(e.target.value)}\r\n              value={algorithm}\r\n              id=\"algorithm\"\r\n              label=\"Algo for\"\r\n              labelPlacement=\"right\"\r\n            >\r\n              <Radio value=\"dda\">\r\n                DDA {algorithmFor === \"circle\" ? \"Circle\" : \"Line\"} Generation\r\n                Algorithm\r\n              </Radio>\r\n              <Radio value=\"bresenham\">\r\n                Bresenham’s {algorithmFor === \"circle\" ? \"Circle \" : \"Line \"}\r\n                Generation Algorithm\r\n              </Radio>\r\n\r\n              <Radio value=\"mid\">\r\n                Mid-Point {algorithmFor === \"circle\" ? \"Circle\" : \"Line\"}{\" \"}\r\n                Drawing Algorithm\r\n              </Radio>\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Block>\r\n        <Block margin=\"2rem 0\">\r\n          <b style={{ fontSize: \"1.5rem\", fontWeight: 400 }}>Co-ordinates :</b>\r\n        </Block>\r\n        <Block display=\"flex\" justifyContent=\"space-evenly\" width=\"50%\">\r\n          <FormControl label=\"X1 \">\r\n            <Input\r\n              type=\"number\"\r\n              autoFocus={true}\r\n              min={0}\r\n              max={128}\r\n              required\r\n              id=\"x1\"\r\n              value={x1}\r\n              onChange={(e) => setx1(parseInt(e.target.value || \"0\"))}\r\n              size={SIZE.compact}\r\n            />\r\n          </FormControl>\r\n        </Block>\r\n\r\n        <Block display=\"flex\" width=\"50%\">\r\n          <FormControl label=\"Y1\">\r\n            <Input\r\n              type=\"number\"\r\n              min={0}\r\n              max={128}\r\n              required\r\n              id=\"y1\"\r\n              value={y1}\r\n              onChange={(e) => sety1(parseInt(e.target.value || \"0\"))}\r\n              size={SIZE.compact}\r\n            />\r\n          </FormControl>\r\n        </Block>\r\n\r\n        <Block\r\n          display={algorithmFor === \"circle\" ? \"none\" : \"flex\"}\r\n          width=\"50%\"\r\n        >\r\n          <FormControl label=\"x2\">\r\n            <Input\r\n              type=\"number\"\r\n              min={0}\r\n              max={128}\r\n              required\r\n              id=\"x2\"\r\n              value={x2}\r\n              onChange={(e) => setx2(parseInt(e.target.value || \"0\"))}\r\n              size={SIZE.compact}\r\n            />\r\n          </FormControl>\r\n        </Block>\r\n\r\n        <Block\r\n          display={algorithmFor === \"circle\" ? \"none\" : \"flex\"}\r\n          width=\"50%\"\r\n        >\r\n          <FormControl label=\"Y2 \">\r\n            <Input\r\n              type={\"number\"}\r\n              min={0}\r\n              max={128}\r\n              required\r\n              id=\"y2\"\r\n              value={y2}\r\n              onChange={(e) => {\r\n                sety2(parseInt(e.target.value || \"0\"));\r\n              }}\r\n              size={SIZE.compact}\r\n            />\r\n          </FormControl>\r\n        </Block>\r\n        <Block\r\n          display={algorithmFor === \"circle\" ? \"flex\" : \"none\"}\r\n          width=\"50%\"\r\n        >\r\n          <FormControl label=\"Radius \">\r\n            <Input\r\n              type=\"number\"\r\n              min={0}\r\n              required\r\n              id=\"radius\"\r\n              value={radius}\r\n              onChange={(e) => setRadius(parseInt(e.target.value || \"0\"))}\r\n              size={SIZE.compact}\r\n            />\r\n          </FormControl>\r\n        </Block>\r\n\r\n        <Block width=\"1rem\"></Block>\r\n        <Button\r\n          type=\"submit\"\r\n          kind=\"primary\"\r\n          value=\"Plot\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            // console.log(x1, y1, x2, y2, radius);\r\n\r\n            data = [\r\n              ...data,\r\n              ...logicController(algorithmFor, algorithm, {\r\n                x1,\r\n                y1,\r\n                x2,\r\n                y2,\r\n                radius,\r\n              }),\r\n            ];\r\n            // console.log(\"data\", data);\r\n            updatePixel(data);\r\n          }}\r\n        >\r\n          Plot\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToprops = (dispatch) => {\r\n  return {\r\n    updatePixel: (payload) => dispatch(updatePixel(payload)),\r\n    clearGrid: () => dispatch(clearGrid()),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    pixels: state.pixelData.pixels,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToprops)(UserInput);\r\n","import ddaLine from \"./algorithm/dda.line\";\r\nimport bresenhamCirle from \"./algorithm/bresenham.circle\";\r\nimport bresenhamLine from \"./algorithm/bresenham.line\";\r\nimport ddaCircle from \"./algorithm/dda.circle\";\r\nimport midCircle from \"./algorithm/mid.circle\";\r\nimport midLine from \"./algorithm/mid.line\";\r\n\r\nexport const logicController = (algoFor, algo, data) => {\r\n  const { x1, y1, x2, y2, radius } = data;\r\n  let pointData = [];\r\n  // console.log(\"from logic controller\", dda);\r\n  if (algoFor === \"line\") {\r\n    switch (algo) {\r\n      case \"dda\":\r\n        pointData.length = 0;\r\n        pointData = ddaLine(x1, y1, x2, y2);\r\n        return pointData;\r\n\r\n      case \"mid\":\r\n        pointData.length = 0;\r\n        pointData = midLine(x1, y1, x2, y2);\r\n        return pointData;\r\n\r\n      case \"bresenham\":\r\n        pointData.length = 0;\r\n        // console.log(\"pointData\", pointData);\r\n        pointData = bresenhamLine(x1, y1, x2, y2);\r\n        // console.log(\"pointData\", pointData);\r\n        return pointData;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  if (algoFor === \"circle\") {\r\n    switch (algo) {\r\n      case \"dda\":\r\n        pointData.length = 0;\r\n        pointData = ddaCircle(x1, y1, radius);\r\n        return pointData;\r\n      case \"mid\":\r\n        pointData.length = 0;\r\n        pointData = midCircle(x1, y1, radius);\r\n        return pointData;\r\n      case \"bresenham\":\r\n        pointData.length = 0;\r\n\r\n        pointData = bresenhamCirle(x1, y1, radius);\r\n\r\n        return pointData;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport PlotterConfig from \"../components/plotterConfig/plotterConfig.component\";\r\nimport Canvas from \"../components/canvas/canvas.component\";\r\nimport UserInput from \"../components/userInput/userInput.component\";\r\nimport { Block } from \"baseui/block\";\r\n\r\nexport const Plotter = () => {\r\n  return (\r\n    <div className=\"plotter-container\" style={{ marginTop: 0 }}>\r\n      <Block marginTop=\"4rem\"></Block>\r\n      <PlotterConfig />\r\n      <Canvas />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Plotter } from \"./pages/plotter.page\";\n// import { PointTable } from \"./pages/table.page\";\nimport UserInput from \"./components/userInput/userInput.component\";\nimport \"./app.scss\";\nimport { Block } from \"baseui/block\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"flex\">\n        <div className=\"flex_item user-input\">\n          <UserInput />\n        </div>\n        <div className=\"flex_item\">\n          <Plotter />\n        </div>\n      </div>\n      <Block margin=\"1rem 0\">\n        <div className=\"flex\"></div>\n      </Block>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider, styled, DarkTheme } from \"baseui\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nimport App from \"./App\";\n\nconst engine = new Styletron();\n\nReactDOM.render(\n  <StyletronProvider value={engine}>\n    <BaseProvider theme={LightTheme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BaseProvider>\n  </StyletronProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}